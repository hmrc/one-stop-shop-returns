# Copyright 2024 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

# This is the main configuration file for the application.
# ~~~~~

appName = one-stop-shop-returns

play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuthModule"
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientV2Module"
play.modules.enabled += "uk.gov.hmrc.mongo.play.PlayMongoModule"
play.modules.enabled += "config.Module"

play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.backend.http.JsonErrorHandler"

play.i18n.langs = ["en"]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

# Microservice specific config

microservice {

  services {
    auth {
      host = localhost
      port = 8500
    }

    one-stop-shop-registration {
      protocol = http
      host     = localhost
      port     = 10201
      basePath = "one-stop-shop-registration"
    }

    des {
      protocol           = http
      host               = localhost
      port               = 10206
      basePath           = "one-stop-shop-returns-stub/"
      authorizationToken = secret
      environment        = test
      regimeType         = "ECOM"
    }

    etmp-list-obligations {
      protocol           = http
      host               = localhost
      port               = 10206
      basePath           = "one-stop-shop-returns-stub/"
      authorizationToken = secret
      environment        = test
      idType             = "VRN"
      regimeType         = "OSS"
    }

    if {
      protocol           = ${microservice.services.des.protocol}
      host               = ${microservice.services.des.host}
      port               = ${microservice.services.des.port}
      basePath           = ${microservice.services.des.basePath}"vec/submitvatreturn/v1/oss"
      authorizationToken = ${microservice.services.des.authorizationToken}
      environment        = ${microservice.services.des.environment}
    }

    return-correction {
      protocol           = http
      host               = localhost
      port               = 10206
      basePath           = "one-stop-shop-returns-stub/vec/ossreturns/returncorrection/v1"
      authorizationToken = secret
      environment        = test
    }

    display-vat-return {
      protocol           = ${microservice.services.des.protocol}
      host               = ${microservice.services.des.host}
      port               = ${microservice.services.des.port}
      basePath           = ${microservice.services.des.basePath}"vec/oss/returns/v1"
      authorizationToken = ${microservice.services.des.authorizationToken}
      environment        = ${microservice.services.des.environment}
    }
  }
}

features {
  coreVatReturns = true
  oss-enrolment = true
  externalEntry = {
    ttlInDays = 1
  }
  strategic-returns = {
    enabled = true
  }
}

oss-enrolment = "HMRC-OSS-ORG"

mongodb {
  uri = "mongodb://localhost:27017/one-stop-shop-returns"
  timeToLiveInDays = 28
  encryption {
      key = "VqmXp7yigDFxbCUdDdNZVIvbW6RgPNJsliv6swQNCL8="
  }

}